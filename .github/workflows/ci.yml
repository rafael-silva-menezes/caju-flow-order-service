name: Go CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ['1.22.6']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true  

      - name: Cache golangci-lint
        uses: actions/cache@v3
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build -v ./...

      - name: Run Linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

      - name: Run Tests with Coverage
        run: go test ./... -coverprofile=coverage.out -json > TestResults-${{ matrix.go-version }}.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: TestResults-${{ matrix.go-version }}
          path: TestResults-${{ matrix.go-version }}.json

      - name: Verify Dependencies
        run: go mod verify

      - name: Format Code
        run: gofmt -s -w .

      - name: Upload Coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.out
          flags: ${{ matrix.go-version }}
          name: Code Coverage
          slug: rafael-silva-menezes/caju-flow-order-service

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Snyk
        run: npm install -g snyk

      - name: Run Snyk Security Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects
